on: 
  push:
    tags:
      - '*' # any tag

name: Release Build

jobs:
  build:
    runs-on: windows-2025
    steps:
      - uses: actions/checkout@v4

      - run: Install-Module powershell-yaml -force

      - id: projectselection
        name: Set build and test projects by tag
        run: ./publish/Get-ReleaseData.ps1 $env:GITHUB_REF_NAME
        #outputs projects, testprojects, releasetitle, newrelease (boolean), releasetag
        #also writes release notes to ./publish/release_notes.txt

      - name: Copy shared xaml for bulk import projects
        run: |
            $bulkImportProjects = @('GiantBombMetadata', 'MobyGamesMetadata', 'PCGamingWikiMetadata', 'SteamTagsImporter', 'TvTropesMetadata')
            foreach ($proj in $bulkImportProjects){
              xcopy "$Env:GITHUB_WORKSPACE\source\PlayniteExtensions.Metadata.Common\GamePropertyImportView.xaml*" "$Env:GITHUB_WORKSPACE\source\$proj\Common\Metadata" /Y /I
            }

      - name: Setup Playnite
        run: |
           Invoke-WebRequest -Uri "https://github.com/JosefNemec/Playnite/releases/download/10.37/Playnite1037.zip" -OutFile "$Env:GITHUB_WORKSPACE\Playnite.zip"
           Expand-Archive "$Env:GITHUB_WORKSPACE\Playnite.zip" -DestinationPath "$Env:GITHUB_WORKSPACE\Playnite"

      - name: Copy Playnite Emulation directory to ExtraEmulatorProfiles
        run: |
           xcopy "$Env:GITHUB_WORKSPACE\Playnite\Emulation\*.yaml" "$Env:GITHUB_WORKSPACE\source\ExtraEmulatorProfiles\EmulationFiles\Original" /Y /I
           xcopy "$Env:GITHUB_WORKSPACE\Playnite\Emulation\Emulators" "$Env:GITHUB_WORKSPACE\source\ExtraEmulatorProfiles\EmulationFiles\Original\Emulators" /Y /I /E

      - name: Build entire solution
        run: |
           cd "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\"
           .\MSBuild.exe "$Env:GITHUB_WORKSPACE\source\PlayniteExtensions.sln" -p:Configuration=Release -restore -clp:ErrorsOnly

      - name: Run unit tests
        run: |
          $testprojects = ConvertFrom-Json '${{ steps.projectselection.outputs.testprojects }}'
          $runnerpath = "$env:USERPROFILE\.nuget\packages\xunit.runner.console\2.8.1\tools\net462\xunit.console.x86.exe"
          foreach ($tp in $testprojects){
            "Executing tests in project: $tp"
            & $runnerpath "$Env:GITHUB_WORKSPACE\source\$tp\bin\Release\net462\$tp.dll"
          }

      - name: Pack with Playnite
        run: |
          mkdir "PackingOutput"
          Write-Host '${{ steps.projectselection.outputs.projects }}'
          $projects = ConvertFrom-Json '${{ steps.projectselection.outputs.projects }}'

          foreach ($p in $projects) {
            Write-Host "Packing project $p"
            $ver = $p.Version -replace '\.', '_'
            & "$Env:GITHUB_WORKSPACE\Playnite\Toolbox.exe" pack "$Env:GITHUB_WORKSPACE\source\$($p.Name)\bin\Release\net462" "$Env:GITHUB_WORKSPACE\PackingOutput"
            Get-ChildItem "$Env:GITHUB_WORKSPACE\PackingOutput" -Filter *.pext | Rename-Item -NewName "$($p.Name)_${ver}.pext"
            Move-Item -Path "$Env:GITHUB_WORKSPACE\PackingOutput\*.pext" -Destination $Env:GITHUB_WORKSPACE
          }

      - name: New release
        uses: softprops/action-gh-release@v2
        if: "steps.projectselection.outputs.newrelease == 'True'"
        with:
          draft: false
          name: '${{ steps.projectselection.outputs.releasetitle }}'
          body_path: 'publish/release_notes.txt'
          files: '*.pext'

      - name: Upload file to existing release
        if: "steps.projectselection.outputs.newrelease == 'False'"
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
            $files = Get-ChildItem -Path *.pext -Name
            foreach ($file in $files) {
              gh release upload ${{ steps.projectselection.outputs.releasetag }} $file
            }
